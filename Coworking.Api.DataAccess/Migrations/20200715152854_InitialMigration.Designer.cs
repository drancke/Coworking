// <auto-generated />
using System;
using Coworking.Api.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Coworking.Api.DataAccess.Migrations
{
    [DbContext(typeof(CoworkingDbContext))]
    [Migration("20200715152854_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Coworking.Api.DataAccess.Contracts.Entities.AdminEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.HasKey("Id");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("Coworking.Api.DataAccess.Contracts.Entities.BookingEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("Date");

                    b.Property<int?>("IdRoom");

                    b.Property<int>("OfficeId");

                    b.Property<bool>("RentWorkSpace");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("Coworking.Api.DataAccess.Contracts.Entities.Office2RoomEntity", b =>
                {
                    b.Property<int>("IdOffice");

                    b.Property<int>("IdRoom");

                    b.HasKey("IdOffice", "IdRoom");

                    b.HasIndex("IdRoom");

                    b.ToTable("Office2Room");
                });

            modelBuilder.Entity("Coworking.Api.DataAccess.Contracts.Entities.OfficeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Acctive");

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<int>("HasIndividualWorkSpace");

                    b.Property<int>("IdAdmin");

                    b.Property<string>("Name");

                    b.Property<int>("NumberWorSpace");

                    b.Property<string>("Phone");

                    b.Property<double>("PriceWorKpaceDay");

                    b.Property<double>("PriceWorkSpaceMonth");

                    b.HasKey("Id");

                    b.HasIndex("IdAdmin")
                        .IsUnique();

                    b.ToTable("Office");
                });

            modelBuilder.Entity("Coworking.Api.DataAccess.Contracts.Entities.Room2ServiceEntity", b =>
                {
                    b.Property<int>("IdService");

                    b.Property<int>("IdRoom");

                    b.HasKey("IdService", "IdRoom");

                    b.HasIndex("IdRoom");

                    b.ToTable("Room2Service");
                });

            modelBuilder.Entity("Coworking.Api.DataAccess.Contracts.Entities.RoomEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cantidad");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("Coworking.Api.DataAccess.Contracts.Entities.ServiceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Name");

                    b.Property<decimal>("Price");

                    b.HasKey("Id");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("Coworking.Api.DataAccess.Contracts.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("SurName");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Coworking.Api.DataAccess.Contracts.Entities.BookingEntity", b =>
                {
                    b.HasOne("Coworking.Api.DataAccess.Contracts.Entities.OfficeEntity", "Office")
                        .WithOne("Booking")
                        .HasForeignKey("Coworking.Api.DataAccess.Contracts.Entities.BookingEntity", "OfficeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Coworking.Api.DataAccess.Contracts.Entities.UserEntity", "User")
                        .WithOne("Booking")
                        .HasForeignKey("Coworking.Api.DataAccess.Contracts.Entities.BookingEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Coworking.Api.DataAccess.Contracts.Entities.Office2RoomEntity", b =>
                {
                    b.HasOne("Coworking.Api.DataAccess.Contracts.Entities.OfficeEntity", "Office")
                        .WithMany("Office2Room")
                        .HasForeignKey("IdOffice")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Coworking.Api.DataAccess.Contracts.Entities.RoomEntity", "Room")
                        .WithMany("Office2Room")
                        .HasForeignKey("IdRoom")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Coworking.Api.DataAccess.Contracts.Entities.OfficeEntity", b =>
                {
                    b.HasOne("Coworking.Api.DataAccess.Contracts.Entities.AdminEntity", "Admin")
                        .WithOne("Office")
                        .HasForeignKey("Coworking.Api.DataAccess.Contracts.Entities.OfficeEntity", "IdAdmin")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Coworking.Api.DataAccess.Contracts.Entities.Room2ServiceEntity", b =>
                {
                    b.HasOne("Coworking.Api.DataAccess.Contracts.Entities.RoomEntity", "Room")
                        .WithMany("Room2Services")
                        .HasForeignKey("IdRoom")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Coworking.Api.DataAccess.Contracts.Entities.ServiceEntity", "Service")
                        .WithMany("Room2Services")
                        .HasForeignKey("IdService")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
